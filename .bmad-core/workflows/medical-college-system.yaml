name: Medical College Management System
version: v2.1
description: Comprehensive workflow for testing and validating the Medical College Management System with advanced search capabilities

# Project Context
context:
  project_type: "Medical Education Management System"
  domain: "Healthcare Education"
  technology_stack: ["React.js", "Node.js", "SQLite3", "Advanced Search Algorithms"]
  current_status: "95% Complete - Backend Functional, Frontend Testing Required"

# Workflow Phases
phases:
  - name: "System Validation"
    description: "Validate current system functionality and identify issues"
    tasks:
      - name: "Backend Health Check"
        agent: "qa"
        description: "Verify all backend endpoints are functional"
        acceptance_criteria:
          - "All API endpoints respond within 500ms"
          - "Database connections are stable"
          - "Authentication system works correctly"
        
      - name: "Frontend Component Testing"
        agent: "dev"
        description: "Test all React components and search functionality"
        acceptance_criteria:
          - "All pages load without errors"
          - "AdvancedSearch component works across all pages"
          - "Search algorithms return relevant results"
          - "No console errors or warnings"

  - name: "Search Algorithm Validation"
    description: "Test and validate all search algorithms for accuracy"
    tasks:
      - name: "Fuzzy Search Testing"
        agent: "qa"
        description: "Test fuzzy search with various input variations"
        test_cases:
          - "Input: 'AIMS' → Should find 'AIIMS'"
          - "Input: 'bombay' → Should find 'Mumbai' colleges"
          - "Input: 'kardioloji' → Should find 'Cardiology'"
        
      - name: "Location Search Testing"
        agent: "qa"
        description: "Test location-aware search with city variations"
        test_cases:
          - "Input: 'ncr' → Should find 'Delhi' colleges"
          - "Input: 'greater mumbai' → Should find 'Mumbai' colleges"
          - "Input: 'bengaluru' → Should find 'Bangalore' colleges"

  - name: "Performance Optimization"
    description: "Optimize system performance and search speed"
    tasks:
      - name: "Search Performance Benchmarking"
        agent: "architect"
        description: "Measure and optimize search algorithm performance"
        metrics:
          - "Search response time < 300ms"
          - "Database query optimization"
          - "Frontend rendering performance"
        
      - name: "Database Optimization"
        agent: "infra-devops-platform"
        description: "Optimize database queries and indexing"
        actions:
          - "Add strategic indexes on search fields"
          - "Optimize SQL queries for large datasets"
          - "Implement query result caching"

  - name: "User Experience Validation"
    description: "Validate user experience and interface usability"
    tasks:
      - name: "Search User Experience Testing"
        agent: "ux-expert"
        description: "Test search interface usability and accessibility"
        focus_areas:
          - "Search input responsiveness"
          - "Suggestion display clarity"
          - "Advanced options usability"
          - "Mobile interface testing"
        
      - name: "Admin Interface Testing"
        agent: "pm"
        description: "Test administrative functions and workflows"
        workflows:
          - "College management operations"
          - "Cutoff import process"
          - "Error correction management"

  - name: "BMAD Integration"
    description: "Integrate BMAD-METHOD AI agents for automated testing"
    tasks:
      - name: "AI Agent Workflow Setup"
        agent: "bmad-orchestrator"
        description: "Configure AI agents for automated system validation"
        configurations:
          - "Automated testing workflows"
          - "Quality assurance automation"
          - "Performance monitoring agents"
        
      - name: "Continuous Validation"
        agent: "qa"
        description: "Implement continuous validation with AI agents"
        features:
          - "Automated regression testing"
          - "Performance monitoring"
          - "Quality metrics tracking"

# Success Criteria
success_criteria:
  - "All search algorithms return accurate results"
  - "Search response time under 300ms"
  - "No critical errors in frontend or backend"
  - "AdvancedSearch component works on all pages"
  - "BMAD-METHOD AI agents successfully integrated"
  - "System ready for production deployment"

# Risk Mitigation
risks:
  - risk: "Search algorithm performance degradation"
    mitigation: "Implement caching and query optimization"
  - risk: "Frontend component compatibility issues"
    mitigation: "Comprehensive component testing"
  - risk: "Database performance bottlenecks"
    mitigation: "Strategic indexing and query optimization"

# Dependencies
dependencies:
  - "Backend server running on port 4000"
  - "Frontend development server on port 4001"
  - "All databases accessible and functional"
  - "BMAD-METHOD framework properly installed"

# Timeline
timeline:
  - phase: "System Validation"
    duration: "2-3 hours"
  - phase: "Search Algorithm Validation"
    duration: "3-4 hours"
  - phase: "Performance Optimization"
    duration: "2-3 hours"
  - phase: "User Experience Validation"
    duration: "2-3 hours"
  - phase: "BMAD Integration"
    duration: "1-2 hours"
  - total_estimated_time: "10-15 hours"

# Agent Assignments
agent_assignments:
  qa: "Quality assurance and testing"
  dev: "Frontend development and component testing"
  architect: "System architecture and performance optimization"
  infra-devops-platform: "Database and infrastructure optimization"
  ux-expert: "User experience and interface validation"
  pm: "Project management and workflow coordination"
  bmad-orchestrator: "BMAD-METHOD integration and AI agent coordination"
